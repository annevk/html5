#!/usr/bin/python
# XXX ...

# Make sure we have a module for doing shell scripts and one for simple web forms.
import os, cgi, re, time
try:
  import xml.utils.iso8601
except:
  pass

mapping = {
  "e": "editorial",
  "a": "authors",
  "c": "conformance-checkers",
  "g": "gecko",
  "i": "internet-explorer",
  "o": "opera",
  "w": "webkit",
  "t": "tools",
  "0": "draft-content",
  "1": "stable-draft",
  "2": "implemented",
  "3": "stable"
}

def parseLogLine(line):
  classes = []
  if line.startswith("["):
    for c in line:
      if c in mapping:
        classes.append(mapping[c])
      if c == ")":
        break
    line = line.split(") ", 1)[-1] # any particular reason why this is -1?
  return {"line": line, "classes": classes}



def filterLog(logList):
  return [key for key in logList if key and key != "-" * 72]



def formatLog(logList):
  logList = filterLog(logList)
  output = ""
  if logList:
    output += "<ol id=\"log\">"
    for line in range(0, len(logList) - 1, 2):
      logInfo = parseLogLine(logList[line+1])
      classInfo = ""
      if logInfo["classes"]:
        classInfo = " class=\"%s\"" % " ".join(logInfo["classes"])
      output += "\n   <li value=\"%s\"%s>%s</li>" % (getNumber(logList[line], 1), classInfo, logInfo["line"])
    output += "\n  </ol>"
  return output



def formatRichLog(logList):
  logList = filterLog(logList)
  output = ""
  if logList:
    output += "<table id=\"log\">\n   <tr><th><abbr title=\"Revision\">R</abbr></th><th>Comment</th><th>Time (UTC)</th></tr>"
    for line in range(0, len(logList) - 1, 2):
      logInfo = parseLogLine(logList[line+1])
      classInfo = ""
      if logInfo["classes"]:
        classInfo = " class=\"%s\"" % " ".join(logInfo["classes"])
      nr = getNumber(logList[line], 1)
      link = "?from=%s&amp;to=%s" % (str(toInt(nr) - 1), nr)
      output += """\n   <tr%s><td>%s</td><td><a href="%s">%s</a></td><td>%s</td></tr>""" % (classInfo, nr, link, logInfo["line"], getDate(logList[line]))
    output += "\n  </table>"
  return output



def getNumber(s, n):
  return re.split("\D+", s)[n]



def getDate(s):
  date = re.split(" \(", re.split(" \| ", s)[2])[0]
  #return time.asctime(time.gmtime(time.mktime(time.strptime(date, "%Y-%m-%d %H:%M:%S -0800")) + 60 * 60 * 8))
  #return time.asctime(time.gmtime(time.mktime(time.strptime(date, "%Y-%m-%d %H:%M:%S -0800"))))
  
  # TODO: this date parsing can probably be reduced, but it's less fragile than before
  try:
    isoDate = date.replace(" ", "T", 1).replace(" ", "") # Convert to ISO 8601 format
    epochDate = xml.utils.iso8601.parse(isoDate) # Convert to seconds since epoch
    date = time.strftime("%Y-%m-%d %H:%M", time.gmtime(epochDate)) # To UTC and format
    return date
  except:
    return date



def getDiffCommand(rFrom, rTo=0):
  command = "svn diff --old http://svn.whatwg.org/webapps/source%s --new http://svn.whatwg.org/webapps/source%s"
  if rTo:
    return command % ("@%s" % rFrom, "@%s" % rTo)
  else:
    return command % ("@%s" % rFrom, "")



def getLogCommand(rFrom, rTo):
  rFrom += 1
  return "svn log http://svn.whatwg.org/webapps/source -r %s:%s" % (rFrom, rTo)



def toInt(s):
  return int(float(s))



def startFormatting():
  # Handling incoming data.
  showDiff = False
  rFrom = 290 # basically ignored, but sometimes a useful fiction for debugging
  rTo = 0

  form = cgi.FieldStorage()

  if "from" in form:
    try:
      rFrom = toInt(form["from"].value)
      showDiff = True
    except:
      pass

  if showDiff and "to" in form:
    try:
      rTo = toInt(form["to"].value)
      if 0 < rTo < rFrom:
        rFrom, rTo = rTo, rFrom
    except:
      pass

  if not showDiff:
    log = formatRichLog(cgi.escape(os.popen("svn log http://svn.whatwg.org/webapps/source --limit 100").read()).splitlines())
    #log = cgi.escape(os.popen("svn log --help").read())
    print document % ("", "", log)
  else:
    diff = cgi.escape(os.popen(getDiffCommand(rFrom, rTo)).read())
    if diff:
      rTo = getNumber(diff, 2)
      log = formatLog(cgi.escape(os.popen(getLogCommand(rFrom, rTo)).read()).splitlines())
      result = """%s
  <pre id="diff">%s</pre>
  <p><input type="button" value="I've read the changes!" onclick="setFrom(%s)">""" % (log, diff, rTo)
      print document % (rFrom, rTo, result)
    else:
      print document % (rFrom, "", "No result.")



document = """Content-Type:text/html;charset=UTF-8

<!doctype html>
<html lang="en">
 <head>
  <meta name="robots" content="index, nofollow">
  <title>Web Applications 1.0 ((X)HTML5) Tracker</title>
  <style>
   html { font:1em/1 Arial, sans-serif }
   form { margin:0 }
   form p { margin:.5em }
   form label input { width:3em }
   table#log { border-collapse:collapse }
   table#log td { padding:.1em .5em }
   table#log td:first-child + td + td { white-space:nowrap }

   .draft-content { background-color:#eee; }
   .stabe-draft { background-color:#fcc; }
   .implemented { background-color:#f99; }
   .stable { background-color:#f66; }
   .editorial { color:gray; }

   td :link { color:inherit; }
   td a { text-decoration:none; }
   td a:hover { text-decoration:underline; }
   td a { display:block; }

   /* filter */
   .hasjs tr[class] { display:none; }
   .negfilter-e tr.editorial { display:none !important; }
   .filter-a tr.authors,
   .filter-c tr.conformance-checkers,
   .filter-g tr.gecko,
   .filter-i tr.internet-explorer,
   .filter-o tr.opera,
   .filter-w tr.webkit,
   .filter-0 tr.draft-content,
   .filter-1 tr.stable-draft,
   .filter-2 tr.implemented,
   .filter-3 tr.stable { display:table-row; !display:block; /* ie7 */ }
   .filter-a li.authors,
   .filter-c li.conformance-checkers,
   .filter-g li.gecko,
   .filter-i li.internet-explorer,
   .filter-o li.opera,
   .filter-w li.webkit,
   .filter-0 li.draft-content,
   .filter-1 li.stable-draft,
   .filter-2 li.implemented,
   .filter-3 li.stable { display:list-item; }
 </style>
  <script>
   function createCookie(name,value,days) {
    var expires = ""
    if(days) {
     var date = new Date()
     date.setTime(date.getTime() + (days * 24 * 60 * 60 * 1000))
     expires = "; expires=" + date.toGMTString()
    }
    document.cookie = name+"="+value+expires+"; path=/"
   }
   function readCookie(name) {
    name += "="
    var ca = document.cookie.split(';')
    for(var i=0; i < ca.length; i++) {
     var c = ca[i]
     while(c.charAt(0)==' ')
      c = c.substring(1,c.length)
     if(c.indexOf(name) == 0)
      return c.substring(name.length,c.length)
    }
    return null;
   }
   function getFieldValue(idName) { return document.getElementById(idName).value }
   function setFieldValue(idName, n) { document.getElementById(idName).value = n }
   function setFrom(n) {
    createCookie('from', n, 30)
    setFieldValue('from', n)
    setFieldValue('to', '')
   }
   window.onload = function() {
    function addClass(elm, className) {
     if (elm.className.indexOf(new RegExp("\\b" + className + "\\b")) == -1)
      elm.className += " "+className;
    }
    function removeClass(elm, className) {
     elm.className = elm.className.replace(new RegExp(className, "g"), "");
    }
    var form = document.forms[0];
    form.onchange = function(e) {
     var target = e.target;
     if(target.type != "checkbox") return;
     if(target.name == "negfilter-e") {
      if(target.checked)
       removeClass(document.body, target.name);
      else
       addClass(document.body, target.name);
     } else {
      if(target.checked)
       addClass(document.body, target.name);
      else
       removeClass(document.body, target.name);
     }
    }
    if(form["negfilter-e"].checked == false)
     document.body.className += "negfilter-e";
    if(form["filter-a"].checked == false)
     removeClass(document.body, "filter-a");
    if(form["filter-c"].checked == false)
     removeClass(document.body, "filter-c");
    if(form["filter-g"].checked == false)
     removeClass(document.body, "filter-g");
    if(form["filter-i"].checked == false)
     removeClass(document.body, "filter-i");
    if(form["filter-o"].checked == false)
     removeClass(document.body, "filter-o");
    if(form["filter-w"].checked == false)
     removeClass(document.body, "filter-w");
    if(form["filter-0"].checked == false)
     removeClass(document.body, "filter-0");
    if(form["filter-1"].checked == false)
     removeClass(document.body, "filter-1");
    if(form["filter-2"].checked == false)
     removeClass(document.body, "filter-2");
    if(form["filter-3"].checked == false)
     removeClass(document.body, "filter-3");
    document.body.className += " hasjs";
   }
  </script>
 </head>
 <body class="filter-a filter-c filter-g filter-i filter-o filter-w filter-0 filter-1 filter-2 filter-3">
  <h1>Web Applications 1.0 ((X)HTML5) Tracker</h1>
  <form>
   <fieldset>
    <legend>Filter</legend>
    <p>Type:
     <label><input type=checkbox name=negfilter-e checked> Editorial</label>
    </p>
    <p>Affects:
     <label><input type=checkbox name=filter-a checked> Authors</label>
     <label><input type=checkbox name=filter-c checked> Conformance checkers</label>
     <label><input type=checkbox name=filter-g checked> Gecko</label>
     <label><input type=checkbox name=filter-i checked> Internet Explorer</label>
     <label><input type=checkbox name=filter-o checked> Opera</label>
     <label><input type=checkbox name=filter-w checked> WebKit</label>
    </p>
    <p>Stability:
     <label><input type=checkbox name=filter-0 checked> Draft content</label>
     <label><input type=checkbox name=filter-1 checked> Stable draft</label>
     <label><input type=checkbox name=filter-2 checked> Implemented</label>
     <label><input type=checkbox name=filter-3 checked> Stable</label>
    </p>
   </fieldset>
  </form>
  <form>
   <fieldset>
    <p>
     <label>From: <input id="from" type="number" min="1" value="%s" name="from" required="required"></label>
     <label>To: <input id="to" type="number" min="0" value="%s" name="to"></label> (omit for the <a href="http://svn.whatwg.org/webapps/">latest revision</a>)</p>
    <p><input type="submit" value="Generate diff"></p>
   </fieldset>
  </form>
  <script>
   if(getFieldValue('from') == "" && readCookie('from') != null)
    setFrom(readCookie('from'))
  </script>
  <hr>
  %s
 </body>
</html>"""



if __name__ == "__main__":
  startFormatting()
