#!/usr/bin/env python

# Make sure we have a module for doing shell scripts and one for simple web forms.
import os
import cgi
import re
import time

mapping = {
    "e": "editorial",
    "a": "authors",
    "c": "conformance-checkers",
    "g": "gecko",
    "i": "internet-explorer",
    "o": "opera",
    "w": "webkit",
    "t": "tools",
    "0": "draft-content",
    "1": "stable-draft",
    "2": "implemented",
    "3": "stable"
}

iconClasses = ["authors", "conformance-checkers", "gecko", "internet-explorer", "opera", "webkit", "tools"]

# This function can probably be beautified
def parseRawLog(svnLog):
    """Parses a raw svn log.
    
    Returns a list with entries, each list item containing a dictionary with two
    keys; info (string) and changes (list)
    """
    logList = cgi.escape(svnLog.read()).splitlines()
    entries = []
    current = 0
    separator = "-" * 72
    for i, line in enumerate(logList): 
        if line != separator:
            # After the separator comes the log info
            if logList[i - 1] == separator:
                entries.append({"info": line, "changes": []})
            elif line:
                entries[current]["changes"].append(line)
            
            # If next list item is a separator, there are no more changes
            if logList[i + 1] == separator:
                current += 1
    return entries


def parseLogLine(logInfo):
    changes = []
    classes = []
    for line in logInfo:
        if line.startswith("["):
            for c in line:
                if c in mapping:
                    classes.append(mapping[c])
                if c == ")":
                    break
            changes.append(line.split(") ", 1)[-1])
        else:
            changes.append(line)
    return {"changes": changes, "classes": classes}


def formatLog(logList):
    output = ""
    if logList:
        output += "<ol id=\"log\">"
        for entry in logList:
            logInfo = parseLogLine(entry["changes"])
            classInfo = ""
            if logInfo["classes"]:
                classInfo = " class=\"%s\"" % " ".join(logInfo["classes"])
            icons = "".join([("<img src=\"icons/%s\" alt=\"[%s]\"> ") % (class_, class_.replace("-", " ").title()) for class_ in logInfo["classes"] if class_ in iconClasses])
            output += "\n   <li value=\"%s\"%s>%s%s</li>" % (getNumber(entry["info"], 1), classInfo, icons, "<br>".join(logInfo["changes"]))
        output += "\n  </ol>"
    return output


def formatRichLog(logList, source):
    output = ""
    if logList:
        output += "<table id=\"log\">\n   <tr><th><abbr title=\"Revision\">R</abbr></th><th>Comment</th><th>Time (UTC)</th></tr>"
        for entry in logList:
            logInfo = parseLogLine(entry["changes"])
            classInfo = ""
            if logInfo["classes"]:
                classInfo = " class=\"%s\"" % " ".join(logInfo["classes"])
            nr = getNumber(entry["info"], 1)
            link = "?from=%s&amp;to=%s" % (str(toInt(nr) - 1), nr)
            if source != "http://svn.whatwg.org/webapps/source": # Shouldn't be hardcoded
                link += "&amp;source=%s" % source
            icons = "".join([("<img src=\"icons/%s\" alt=\"[%s]\"> ") % (class_, class_.replace("-", " ").title()) for class_ in logInfo["classes"] if class_ in iconClasses])
            output += """\n   <tr%s><td>%s</td><td><a href="%s">%s%s</a></td><td>%s</td></tr>""" % (classInfo, nr, link, icons, "<br>".join(logInfo["changes"]), getDate(entry["info"]))
        output += "\n  </table>"
    return output


def formatDiff(diff):
    diff = diff.splitlines()
    diffList = []
    formatting = """<span%s>%s</span>"""

    for line in diff:
        if line.startswith("@@"):
            diffList.append(formatting % (" class=\"line-info\"", line))
        elif line.startswith("+"):
            diffList.append(formatting % (" class=\"addition\"", line))
        elif line.startswith("-"):
            diffList.append(formatting % (" class=\"deletion\"", line))
        else:
            diffList.append(formatting % ("", line))

    return "\n".join(diffList)
            


def getNumber(s, n):
    return re.split("\D+", s)[n]


def getDate(s):
    date = re.split(" \(", re.split(" \| ", s)[2])[0]
    return date[0:16] # Chops off seconds and time zone


def getDiffCommand(source, revFrom, revTo=0):
    command = "svn diff --old %s%s --new %s%s"
    if revTo:
        return command % (source, "@%s" % revFrom, source, "@%s" % revTo)
    else:
        return command % (source, "@%s" % revFrom, source, "")


def getLogCommand(source, revFrom, revTo):
    revFrom += 1
    return "svn log %s -r %s:%s" % (source, revFrom, revTo)


def toInt(s):
    return int(float(s))


def startFormatting():
    # Handling incoming data.
    source = "http://svn.whatwg.org/webapps/source"
    showDiff = False
    revFrom = 290 # basically ignored, but sometimes a useful fiction for debugging
    revTo = 0
    os.environ["TZ"] = "" # Set time zone to UTC. Kinda hacky, but works :-)

    form = cgi.FieldStorage()

    if "from" in form:
        try:
            revFrom = toInt(form["from"].value)
            showDiff = True
        except:
            pass

    if showDiff and "to" in form:
        try:
            revTo = toInt(form["to"].value)
            if 0 < revTo < revFrom:
                revFrom, revTo = revTo, revFrom
        except:
            pass

    if "source" in form:
        source = form["source"].value

    if not showDiff:
        svnLog = os.popen("svn log %s --limit 100" % source)
        parsedLog = parseRawLog(svnLog)
        formattedLog = formatRichLog(parsedLog, source)
        print document % ("", "", formattedLog)
    else:
        diff = cgi.escape(os.popen(getDiffCommand(source, revFrom, revTo)).read())
        formattedDiff = formatDiff(diff)
        if diff:
            revTo = getNumber(diff, 2)
            svnLog = os.popen(getLogCommand(source, revFrom, revTo))
            parsedLog = parseRawLog(svnLog)
            formattedLog = formatLog(parsedLog)
            result = """%s
  <pre id="diff">%s</pre>
  <p><input type="button" value="I've read the changes!" onclick="setFrom(%s)">""" % (formattedLog, formattedDiff, revTo)
            print document % (revFrom, revTo, result)
        else:
            print document % (revFrom, "", "No result.")


document = """Content-Type:text/html;charset=UTF-8

<!doctype html>
<html lang="en">
 <head>
  <meta name="robots" content="index, nofollow">
  <title>Web Applications 1.0 ((X)HTML5) Tracker</title>
  <style>
   html { background:#fff; color:#000; font:1em/1 Arial, sans-serif }
   form { margin:0 }
   form p { margin:.5em }
   input#from, input#to { width:3em }
   table#log { border-collapse:collapse }
   table#log td { padding:.1em .5em }
   table#log td:first-child + td + td { white-space:nowrap }

   .draft-content { background-color:#eee; }
   .stable-draft { background-color:#fcc; }
   .implemented { background-color:#f99; }
   .stable { background-color:#f66; }
   .editorial { color:gray; }

   :link { background-color:transparent; color:#00f; }
   :visited { background-color:transparent; color:#066; }
   img { border-style:none; vertical-align:middle; }

   td :link { color:inherit; }
   td a { text-decoration:none; display:block; }
   td a:hover { text-decoration:underline; }

   /* filter */
   .hasjs tr[class], .hasjs li[class] { display:none; }
   .negfilter-e .editorial { display:none !important; }
   .filter-a tr.authors,
   .filter-c tr.conformance-checkers,
   .filter-g tr.gecko,
   .filter-i tr.internet-explorer,
   .filter-o tr.opera,
   .filter-w tr.webkit,
   .filter-t tr.tools,
   .filter-0 tr.draft-content,
   .filter-1 tr.stable-draft,
   .filter-2 tr.implemented,
   .filter-3 tr.stable { display:table-row; !display:block; /* ie7 */ }
   .filter-a li.authors,
   .filter-c li.conformance-checkers,
   .filter-g li.gecko,
   .filter-i li.internet-explorer,
   .filter-o li.opera,
   .filter-w li.webkit,
   .filter-t li.tools,
   .filter-0 li.draft-content,
   .filter-1 li.stable-draft,
   .filter-2 li.implemented,
   .filter-3 li.stable { display:list-item; }
   
   #diff { display: table; white-space: normal }
   #diff span { display: block; white-space: pre }
   #diff .deletion { background: #fdd; color: #900 }
   #diff .addition { background: #dfd; color: #000 }
   #diff .line-info { background: #eee; color: #000 }
 </style>
  <script>
   function createCookie(name,value,days) {
    var expires = ""
    if(days) {
     var date = new Date()
     date.setTime(date.getTime() + (days * 24 * 60 * 60 * 1000))
     expires = "; expires=" + date.toGMTString()
    }
    document.cookie = name+"="+value+expires+"; path=/"
   }
   function readCookie(name) {
    name += "="
    var ca = document.cookie.split(';')
    for(var i=0; i < ca.length; i++) {
     var c = ca[i]
     while(c.charAt(0)==' ')
      c = c.substring(1,c.length)
     if(c.indexOf(name) == 0)
      return c.substring(name.length,c.length)
    }
    return null;
   }
   function getFieldValue(idName) { return document.getElementById(idName).value }
   function setFieldValue(idName, n) { document.getElementById(idName).value = n }
   function setFrom(n) {
    createCookie('from', n, 30)
    setFieldValue('from', n)
    setFieldValue('to', '')
   }
   window.onload = function() {
    function addClass(elm, className) {
     if (elm.className.indexOf(new RegExp("\\b" + className + "\\b")) == -1)
      elm.className += " "+className;
    }
    function removeClass(elm, className) {
     elm.className = elm.className.replace(new RegExp("(^|\\\s+)" + className + "($|\\\s+)", "g"), " ");
    }
    var form = document.forms[0];
    form.onchange = function(e) {
     var target = e.target;
     if(target.type != "checkbox") return;
     if(target.name == "negfilter-e") {
      if(target.checked)
       removeClass(document.body, target.name);
      else
       addClass(document.body, target.name);
     } else {
      if(target.checked)
       addClass(document.body, target.name);
      else
       removeClass(document.body, target.name);
     }
    }
    if(form["negfilter-e"].checked == false)
     document.body.className += "negfilter-e";
    for(var i = 2, len = form.elements.length; i < len; ++i) {
     var filter = form.elements[i];
     if(filter.checked == false)
      removeClass(document.body, filter.name);
    }
    document.body.className += " hasjs";
   }
  </script>
 </head>
 <body class="filter-a filter-c filter-g filter-i filter-o filter-w filter-t filter-0 filter-1 filter-2 filter-3">
  <h1>Web Applications 1.0 ((X)HTML5) Tracker</h1>
  <form>
   <fieldset>
    <legend>Filter</legend>
    <p>Type:
     <label class=editorial><input type=checkbox name=negfilter-e checked> Editorial</label>
    </p>
    <p>Affects:
     <label><input type=checkbox name=filter-a checked> <img src="icons/authors" alt=""> Authors</label>
     <label><input type=checkbox name=filter-c checked> <img src="icons/conformance-checkers" alt=""> Conformance checkers</label>
     <label><input type=checkbox name=filter-g checked> <img src="icons/gecko" alt=""> Gecko</label>
     <label><input type=checkbox name=filter-i checked> <img src="icons/internet-explorer" alt=""> Internet Explorer</label>
     <label><input type=checkbox name=filter-o checked> <img src="icons/opera" alt=""> Opera</label>
     <label><input type=checkbox name=filter-w checked> <img src="icons/webkit" alt=""> WebKit</label>
     <label><input type=checkbox name=filter-t checked> <img src="icons/tools" alt=""> Tools</label>
    </p>
    <p>Stability:
     <label class=draft-content><input type=checkbox name=filter-0 checked> Draft content</label>
     <label class=stable-draft><input type=checkbox name=filter-1 checked> Stable draft</label>
     <label class=implemented><input type=checkbox name=filter-2 checked> Implemented</label>
     <label class=stable><input type=checkbox name=filter-3 checked> Stable</label>
    </p>
   </fieldset>
  </form>
  <form>
   <fieldset>
    <p>
     <label>From: <input id="from" type="number" min="1" value="%s" name="from" required="required"></label>
     <label>To: <input id="to" type="number" min="0" value="%s" name="to"></label> (omit for the <a href="http://svn.whatwg.org/webapps/">latest revision</a>)</p>
    <p><input type="submit" value="Generate diff"></p>
   </fieldset>
  </form>
  <script>
   if(getFieldValue('from') == "" && readCookie('from') != null)
    setFrom(readCookie('from'))
  </script>
  <hr>
  %s
 </body>
</html>"""


if __name__ == "__main__":
    startFormatting()
